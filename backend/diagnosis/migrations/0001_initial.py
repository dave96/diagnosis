# Generated by Django 2.2.6 on 2019-12-14 18:27


from django.db import migrations, models
import django.db.models.deletion
from xml.dom import minidom
import psycopg2
import pdb

def load_data(name):
  #  try:
    print("Opening file "+ name)
    dic = minidom.parse(name)
    print("Debug: Parsed")
  #  except:

    return dic


def charge_xml(apps, schema_editor):
    Disorder = apps.get_model("diagnosis","Disorder")
    Phenotype = apps.get_model("diagnosis","Phenotype")
    Frequency = apps.get_model("diagnosis","Frequency")
    Disorder_Phenotype = apps.get_model("diagnosis","Disorder_Phenotype")
    disorders_file="./en_product4_HPO.xml"
    data = load_data(disorders_file)
    disorders = data.getElementsByTagName('Disorder')
    for disorder in disorders:
        identifier = disorder.getAttribute("id");
        number = disorder.getElementsByTagName("OrphaNumber")[0].firstChild.nodeValue
        name = disorder.getElementsByTagName("Name")[0].firstChild.nodeValue
        print(number)
        dis_o = Disorder.objects.update_or_create(identifier=identifier,orphanumber=number,name=name)[0]
        vlist = disorder.getElementsByTagName("HPODisorderAssociationList")[0]
        vasso = vlist.getElementsByTagName("HPODisorderAssociation")
        for association in vasso:
        #    print("Hi")
            phe = association.getElementsByTagName("HPO")[0]
            phe_id = phe.getAttribute("id")
            phe_orphanumber = phe.getElementsByTagName("HPOId")[0].firstChild.nodeValue
            phe_term = phe.getElementsByTagName("HPOTerm")[0].firstChild.nodeValue
            phe_o =  Phenotype.objects.update_or_create(identifier=phe_id,term=phe_term,orphanumber=phe_orphanumber)[0]

            freq = association.getElementsByTagName("HPOFrequency")[0]
            freq_orphanumber = freq.getElementsByTagName("OrphaNumber")[0].firstChild.nodeValue
            freq_term = freq.getElementsByTagName("Name")[0].firstChild.nodeValue
            freq_o = Frequency.objects.update_or_create(orphanumber=freq_orphanumber,text=freq_term)[0]
            Disorder_Phenotype.objects.update_or_create(disorder_orphanumber=dis_o,phenotype_orphanumber=phe_o,frequency_orphanumber=freq_o)[0]



class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Disorder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.IntegerField()),
                ('orphanumber', models.CharField(max_length=120, unique=True)),
                ('name', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Frequency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orphanumber', models.CharField(max_length=120, unique=True)),
                ('text', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Phenotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.IntegerField()),
                ('term', models.CharField(max_length=120)),
                ('orphanumber', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Disorder_Phenotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disorder_orphanumber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.Disorder')),
                ('frequency_orphanumber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.Frequency')),
                ('phenotype_orphanumber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.Phenotype')),
            ],
        ),
        migrations.RunPython(charge_xml)
    ]
